{"ast":null,"code":"/** @format */\nimport { ADDED, ADD_COLOR, ALL_CLEARED, ALL_COMPLETED, DELETED, TOGGLED } from \"./actionTypes\";\n\nconst nextTodoId = todos => {\n  const maxId = todos.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADDED:\n      return [...state, {\n        id: nextTodoId(state),\n        todo: action.payload\n      }];\n\n    case TOGGLED:\n      return state.map(todo => {\n        if (todo.id !== action.payload) {\n          return todo;\n        }\n\n        return { ...todo,\n          completed: !todo.completed\n        };\n      });\n\n    case ADD_COLOR:\n      const {\n        todoId,\n        color\n      } = action.payload;\n      return state.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return { ...todo,\n          color\n        };\n      });\n\n    case DELETED:\n      return state.filter(todo => todo.id !== action.payload);\n\n    case ALL_COMPLETED:\n      return state.map(todo => {\n        return { ...todo,\n          completed: true\n        };\n      });\n\n    case ALL_CLEARED:\n      return state.filter(todo => !todo.completed);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/jmrana/Documents/projects/react/lws/think-in-a-redux-way/src/redux/todos/reducer.js"],"names":["ADDED","ADD_COLOR","ALL_CLEARED","ALL_COMPLETED","DELETED","TOGGLED","nextTodoId","todos","maxId","reduce","todo","Math","max","id","reducer","state","action","type","payload","map","completed","todoId","color","filter"],"mappings":"AAAA;AAEA,SACEA,KADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,OALF,EAMEC,OANF,QAOO,eAPP;;AASA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACD,KAAD,EAAQE,IAAR,KAAiBC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBE,IAAI,CAACG,EAArB,CAA9B,EAAwD,CAAC,CAAzD,CAAd;AACA,SAAOL,KAAK,GAAG,CAAf;AACD,CAHD;;AAIA,MAAMM,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,KAAL;AACE,aAAO,CACL,GAAGe,KADE,EAEL;AACEF,QAAAA,EAAE,EAAEP,UAAU,CAACS,KAAD,CADhB;AAEEL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAFf,OAFK,CAAP;;AAOF,SAAKb,OAAL;AACE,aAAOU,KAAK,CAACI,GAAN,CAAWT,IAAD,IAAU;AACzB,YAAIA,IAAI,CAACG,EAAL,KAAYG,MAAM,CAACE,OAAvB,EAAgC;AAC9B,iBAAOR,IAAP;AACD;;AACD,eAAO,EACL,GAAGA,IADE;AAELU,UAAAA,SAAS,EAAE,CAACV,IAAI,CAACU;AAFZ,SAAP;AAID,OARM,CAAP;;AASF,SAAKnB,SAAL;AACE,YAAM;AAAEoB,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAoBN,MAAM,CAACE,OAAjC;AACA,aAAOH,KAAK,CAACI,GAAN,CAAWT,IAAD,IAAU;AACzB,YAAIA,IAAI,CAACG,EAAL,KAAYQ,MAAhB,EAAwB;AACtB,iBAAOX,IAAP;AACD;;AACD,eAAO,EACL,GAAGA,IADE;AAELY,UAAAA;AAFK,SAAP;AAID,OARM,CAAP;;AASF,SAAKlB,OAAL;AACE,aAAOW,KAAK,CAACQ,MAAN,CAAcb,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAYG,MAAM,CAACE,OAA1C,CAAP;;AACF,SAAKf,aAAL;AACE,aAAOY,KAAK,CAACI,GAAN,CAAWT,IAAD,IAAU;AACzB,eAAO,EACL,GAAGA,IADE;AAELU,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID,OALM,CAAP;;AAMF,SAAKlB,WAAL;AACE,aAAOa,KAAK,CAACQ,MAAN,CAAcb,IAAD,IAAU,CAACA,IAAI,CAACU,SAA7B,CAAP;;AAEF;AACE,aAAOL,KAAP;AA3CJ;AA6CD,CA9CD;;AAgDA,eAAeD,OAAf","sourcesContent":["/** @format */\n\nimport {\n  ADDED,\n  ADD_COLOR,\n  ALL_CLEARED,\n  ALL_COMPLETED,\n  DELETED,\n  TOGGLED,\n} from \"./actionTypes\";\n\nconst nextTodoId = (todos) => {\n  const maxId = todos.reduce((maxId, todo) => Math.max(maxId, todo.id), -1);\n  return maxId + 1;\n};\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case ADDED:\n      return [\n        ...state,\n        {\n          id: nextTodoId(state),\n          todo: action.payload,\n        },\n      ];\n    case TOGGLED:\n      return state.map((todo) => {\n        if (todo.id !== action.payload) {\n          return todo;\n        }\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      });\n    case ADD_COLOR:\n      const { todoId, color } = action.payload;\n      return state.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n        return {\n          ...todo,\n          color,\n        };\n      });\n    case DELETED:\n      return state.filter((todo) => todo.id !== action.payload);\n    case ALL_COMPLETED:\n      return state.map((todo) => {\n        return {\n          ...todo,\n          completed: true,\n        };\n      });\n    case ALL_CLEARED:\n      return state.filter((todo) => !todo.completed);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}